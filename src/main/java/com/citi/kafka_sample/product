@Service
public class SMCDBProductServiceImpl implements SMCDBProductService {

    private static final Logger logger = LoggerFactory.getLogger(SMCDBProductServiceImpl.class);

    @Autowired
    private final SMCProductRepository smcProductRepository;

    @Autowired
    private final SMCProductArchiveRepository smcProductArchiveRepository;

    @Autowired
    private final DimContractService dimContractService;

    public SMCDBProductServiceImpl(SMCProductRepository smcProductRepository, SMCProductArchiveRepository smcProductArchiveRepository) {
        this.smcProductRepository = smcProductRepository;
        this.smcProductArchiveRepository = smcProductArchiveRepository;
    }

    @Transactional
    public void persist(List<SMCGoldDto> smcGoldDtoList) {
        if (smcGoldDtoList == null || smcGoldDtoList.isEmpty()) return;

        List<SMCProduct> toAdd = new ArrayList<>();
        List<SMCProduct> toDelete = new ArrayList<>();
        List<SMCProductArchive> toArchive = new ArrayList<>();

        Map<String, SMCGoldDto> dtoMap = new HashMap<>();

        // Prepare input DTO map
        for (SMCGoldDto dto : smcGoldDtoList) {
            if (dto != null && dto.getProductSMCP() != null && !dto.getProductSMCP().isEmpty()) {
                String productId = dto.getProductSMCP().get(0).getSmcp();
                boolean isProduct = "PRODUCT".equals(dto.getExchangeListingInfo().get(0).getInstrumentListingLevel());
                if (productId != null && isProduct) {
                    dtoMap.put(productId, dto);
                }
            }
        }

        if (dtoMap.isEmpty()) return;

        List<String> productIds = new ArrayList<>(dtoMap.keySet());
        List<SMCProduct> existingProducts = smcProductRepository.findBySmcpProductIds(productIds);
        Map<String, SMCProduct> existingMap = existingProducts.stream()
                .collect(Collectors.toMap(SMCProduct::getSmcpProductId, Function.identity()));

        String user = System.getProperty("user.name", "system");
        Timestamp now = Timestamp.valueOf(LocalDateTime.now());

        for (Map.Entry<String, SMCGoldDto> entry : dtoMap.entrySet()) {
            String productId = entry.getKey();
            SMCGoldDto dto = entry.getValue();

            SMCProduct newProduct = smcProductGoldDtoMapper.INSTANCE.toSmcProduct(dto);

            if (existingMap.containsKey(productId)) {
                SMCProduct existing = existingMap.get(productId);

                SMCProductArchive archive = smcProductGoldDtoToArchiveMapper.INSTANCE.toSmcProduct(existing);
                toArchive.add(archive);
                toDelete.add(existing);

                newProduct.setCreatedBy(existing.getCreatedBy());
                newProduct.setCreatedDTT(existing.getCreatedDTT());
            } else {
                newProduct.setCreatedBy(user);
                newProduct.setCreatedDTT(now);
            }

            newProduct.setModifiedBy(user);
            newProduct.setModifiedDTT(now);
            toAdd.add(newProduct);
        }

        try {
            if (!toArchive.isEmpty()) {
                List<SMCProductArchive> archived = smcProductArchiveRepository.saveAll(toArchive);
                logger.info("{} REF Product Archive records saved.", archived.size());
            } else {
                logger.info("No REF Product Archive data to save.");
            }

            if (!toDelete.isEmpty()) {
                smcProductRepository.deleteAll(toDelete);
                logger.info("{} REF Product records deleted.", toDelete.size());
            } else {
                logger.info("No REF Product records to delete.");
            }

            if (!toAdd.isEmpty()) {
                List<SMCProduct> added = smcProductRepository.saveAll(toAdd);
                logger.info("{} REF Product records saved.", added.size());
            } else {
                logger.info("No REF Product records to add.");
            }

            dimContractService.persistProducts(toAdd);

        } catch (DataAccessException e) {
            logger.error("Saving REF_SMC_PRODUCT and archives failed.", e);
            // TODO: Add retry handling
        }
    }
}
