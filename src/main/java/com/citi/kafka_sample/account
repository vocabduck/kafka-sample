@Transactional
public void persist(List<EsalesGoldDto> esalesGoldDtoList) {
    if (esalesGoldDtoList == null || esalesGoldDtoList.isEmpty()) return;

    List<EsalesData> toAdd = new ArrayList<>();
    List<EsalesData> toDelete = new ArrayList<>();
    List<EsalesDataArchive> toArchive = new ArrayList<>();

    Map<EsalesDataKey, EsalesGoldDto> dtoMap = new HashMap<>();

    for (EsalesGoldDto dto : esalesGoldDtoList) {
        if (dto != null && dto.getMnemonic() != null && dto.getGfcid() != null && dto.getActi() != null) {
            EsalesDataKey key = new EsalesDataKey(dto.getMnemonic(), dto.getGfcid(), dto.getActi());
            dtoMap.put(key, dto);
        }
    }

    if (dtoMap.isEmpty()) return;

    List<EsalesDataKey> keys = new ArrayList<>(dtoMap.keySet());
    List<EsalesData> existingRecords = esalesISGDataRepository.findAllById(keys);
    Set<EsalesDataKey> existingKeys = existingRecords.stream()
        .map(EsalesData::getEsalesDataKey)
        .collect(Collectors.toSet());

    String user = System.getProperty("user.name", "system");
    LocalDateTime now = LocalDateTime.now();

    for (Map.Entry<EsalesDataKey, EsalesGoldDto> entry : dtoMap.entrySet()) {
        EsalesDataKey key = entry.getKey();
        EsalesGoldDto dto = entry.getValue();

        EsalesData entity = amcGoldDtoMapper.INSTANCE.toEntity(dto);

        if (existingKeys.contains(key)) {
            Optional<EsalesData> original = existingRecords.stream()
                .filter(d -> d.getEsalesDataKey().equals(key))
                .findFirst();

            original.ifPresent(orig -> {
                EsalesDataArchive archive = amcGoldDtoToArchiveMapper.INSTANCE.toEntity(orig);
                toArchive.add(archive);
                toDelete.add(orig);

                entity.setCreatedBy(orig.getCreatedBy());
                entity.setCreatedDDT(orig.getCreatedDDT());
            });
        } else {
            entity.setCreatedBy(user);
            entity.setCreatedDDT(now);
        }

        entity.setModifiedBy(user);
        entity.setModifiedDDT(now);
        toAdd.add(entity);
    }

    try {
        if (!toArchive.isEmpty()) {
            List<EsalesDataArchive> archived = esalesISGDataArchiveRepository.saveAll(toArchive);
            logger.info("{} REF Account Archive records saved.", archived.size());
        } else {
            logger.info("No REF Account Archive data to save.");
        }

        if (!toDelete.isEmpty()) {
            esalesISGDataRepository.deleteAll(toDelete);
            logger.info("{} REF Account records deleted.", toDelete.size());
        } else {
            logger.info("No REF Account records to delete.");
        }

        if (!toAdd.isEmpty()) {
            List<EsalesData> added = esalesISGDataRepository.saveAll(toAdd);
            logger.info("{} REF Account records saved.", added.size());
        } else {
            logger.info("No REF Account records to add.");
        }

        dimAccountService.persistAccounts(toAdd);

    } catch (DataAccessException e) {
        logger.error("Saving REF_AMC_ACCOUNT and archives failed.", e);
        // TODO: Add retry logic
    }
}
