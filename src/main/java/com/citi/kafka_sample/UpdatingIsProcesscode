@Bean(name = "refToDimAccLoadJob")
public Job refToDimAccLoadJob(
        @Qualifier("refToDimAccLoadStep") Step refToDimAccLoadStep,
        @Qualifier("updateIsProcessedStep") Step updateIsProcessedStep,
        JobRepository jobRepository) {
    return new JobBuilder("refToDimAccLoadJob", jobRepository)
            .start(refToDimAccLoadStep)
            .next(updateIsProcessedStep) // Step 2 added
            .listener(jobFailureListener)
            .build();
}

@Bean(name = "updateIsProcessedStep")
public Step updateIsProcessedStep(JobRepository jobRepository,
                                  PlatformTransactionManager transactionManager,
                                  EsalesDataReader reader,
                                  EsalesDataProcessor processor,
                                  EsalesDataWriter writer) {

    return new StepBuilder("updateIsProcessedStep", jobRepository)
            .<EsalesData, EsalesData>chunk(500, transactionManager)
            .reader(reader)
            .processor(processor)
            .writer(writer)
            .build();
}

public interface EsalesDataReader extends PagingAndSortingRepository<EsalesData, Long> {
    @Query("SELECT e FROM EsalesData e WHERE e.isProcessed = 'F'")
    Page<EsalesData> findByUnprocessed(Pageable pageable);
}

public class EsalesDataProcessor implements ItemProcessor<EsalesData, EsalesData> {
    @Override
    public EsalesData process(EsalesData item) {
        item.setIsProcessed("T");
        return item;
    }
}


public class EsalesDataWriter implements ItemWriter<EsalesData> {
    @Autowired
    private EsalesISGDataRepository repo;

    @Override
    public void write(Chunk<? extends EsalesData> items) {
        repo.saveAll(items);
    }
}
